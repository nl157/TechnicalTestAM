@page "/"
@inject IDecoderService _decoderService
@inject IOptions<ErrorMessageOptions> _errorMessageOptions
@rendermode InteractiveServer
<PageTitle>MessageDecode</PageTitle>

<input type="text" autofocus @bind-value="Input" @bind-value:event="oninput" @bind-value:after="DecodeMessage"
    placeholder="@Placeholder" />
<br />
@foreach (var label in Output)
{
    <label class="OutputLabel">@label</label>
    <br/>
}

@code {
    private string? Input;
    private List<string> Output = new List<string>();
    private string? Placeholder;

    protected override void OnInitialized()
    {
        Placeholder = _errorMessageOptions.Value.Placeholder;
        Output.Add(_errorMessageOptions.Value.EmptyText);
    }
    
    private async Task DecodeMessage()
    {
        Output.Clear();
        if (Input is null || Input == "")
        {
            Output.Add(_errorMessageOptions.Value.EmptyText);
            return;
        }
        var result = await _decoderService.DecodeMessage(Input);
        Output = result.IsSuccess ? result.Data : result.Error!.Message.ToMultiLineString();
    }
}